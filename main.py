from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, LocationMessage
from geopy.distance import geodesic

app = Flask(__name__)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TOKEN ‡πÅ‡∏•‡∏∞ SECRET ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
LINE_CHANNEL_ACCESS_TOKEN = 'd06gh77lEptxLd8M2i9njAgtXsL5fQ22FWg75YAw55+rWvxWfKHQGAw1uzjcdYg/DcVsVhaXLgGx7mS66/18de2yIaFO3FxEmCKnSt9KrYRFD56YaxpJzNj71OJsxSWIcGFZagjb92y/T+00BirmiwdB04t89/1O/w1cDnyilFU='
LINE_CHANNEL_SECRET = '84c05a361aa06d0d9b1db76d0cb33f04'

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏à‡∏≥‡∏•‡∏≠‡∏á
TOILETS = [
    {"name": "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏ß‡∏° 1 (‡∏ä‡∏≤‡∏¢)", "lat": 7.006100, "lng": 100.497800, "floor": "‡∏ä‡∏±‡πâ‡∏ô 1", "note": "‡πÉ‡∏Å‡∏•‡πâ‡∏•‡∏¥‡∏ü‡∏ï‡πå"},
    {"name": "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏ß‡∏° 1 (‡∏´‡∏ç‡∏¥‡∏á)", "lat": 7.006150, "lng": 100.497850, "floor": "‡∏ä‡∏±‡πâ‡∏ô 1", "note": "‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏•‡∏¥‡∏ü‡∏ï‡πå"},
    {"name": "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏≠‡∏™‡∏°‡∏∏‡∏î‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "lat": 7.005500, "lng": 100.495000, "floor": "‡∏ä‡∏±‡πâ‡∏ô 2", "note": "‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô"},
    {"name": "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á", "lat": 7.004900, "lng": 100.496200, "floor": "‡∏ä‡∏±‡πâ‡∏ô 1", "note": "‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏ï‡∏¥‡∏î‡∏Å‡∏≥‡πÅ‡∏û‡∏á"},
    {"name": "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (‡∏´‡∏ç‡∏¥‡∏á)", "lat": 7.007727, "lng": 100.498387, "floor": "‡∏ä‡∏±‡πâ‡∏ô 3", "note": "‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏ç‡∏¥‡∏á"},
]

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_text_message(event):
    text = event.message.text.lower()
    if '‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥' in text:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (Location)")
        )
    else:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏∏‡∏ì")
        )

@handler.add(MessageEvent, message=LocationMessage)
def handle_location_message(event):
    user_location = (event.message.latitude, event.message.longitude)
    nearest = min(TOILETS, key=lambda t: geodesic((t["lat"], t["lng"]), user_location).meters)
    distance = geodesic((nearest["lat"], nearest["lng"]), user_location).meters

    reply_text = (
        f"\U0001f6bb ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠:\n"
        f"{nearest['name']} ({nearest['floor']})\n"
        f"üìç {nearest['note']}\n"
        f"üìè ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {int(distance)} ‡πÄ‡∏°‡∏ï‡∏£\n"
        f"üó∫Ô∏è https://maps.google.com/?q={nearest['lat']},{nearest['lng']}"
    )

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=reply_text)
    )

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=3000)
